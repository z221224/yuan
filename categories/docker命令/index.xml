<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docker命令 on 米 粒</title>
        <link>https://z221224.github.io/yuan/categories/docker%E5%91%BD%E4%BB%A4/</link>
        <description>Recent content in Docker命令 on 米 粒</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>米饭能吃饱</copyright>
        <lastBuildDate>Mon, 06 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://z221224.github.io/yuan/categories/docker%E5%91%BD%E4%BB%A4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>docker入门</title>
        <link>https://z221224.github.io/yuan/p/docker%E5%85%A5%E9%97%A8/</link>
        <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://z221224.github.io/yuan/p/docker%E5%85%A5%E9%97%A8/</guid>
        <description>&lt;h2 id=&#34;docker介绍&#34;&gt;Docker介绍
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Docker作用：
	解决环境差异，引发不兼容问题。
	快速搭建环境，快速水平扩展(集群)
	
	一次构建，应用到处运行。

docker 是一个开源的应用容器引擎，基于 Go 语言开发。
	好处：
			可移植性
			可伸缩
			隔离性
			资源利用率高
			
镜像加速器配置：
sudo mkdir -p /etc/docker
		sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&#39;EOF&#39;
			{
			  &amp;quot;registry-mirrors&amp;quot;: [

					&amp;quot;https://registry.dockermirror.com&amp;quot;,
				
					&amp;quot;阿里镜像&amp;quot;,
				
					&amp;quot;https://docker.nju.edu.cn&amp;quot;,

					&amp;quot;https://hub.littlediary.cn&amp;quot;,

					&amp;quot;https://hub.xdark.top&amp;quot;,

					&amp;quot;https://dockerpull.org&amp;quot;,

					&amp;quot;https://hub.crdz.gq&amp;quot;,

					&amp;quot;https://docker.1panel.live&amp;quot;,

					&amp;quot;https://docker.unsee.tech&amp;quot;
					
					]
			}
		EOF
		sudo systemctl daemon-reload
		sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;镜像常用命令&#34;&gt;镜像常用命令
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;查看镜像：

	中央仓库连接不上。进行  【docker search 镜像名称】   会报超时问题。暂时不管或科学上网。
	docker search redis
	Error response from daemon: Get &amp;quot;https://index.docker.io/v1/search?q=redis&amp;amp;n=25&amp;quot;: net/http: TLS handshake timeout

拉取镜像(下载)
	docker pull 镜像名称[:tag]    如果不指定版本号，表示下载最新版本
	
	删除镜像
		# 删除单个镜像(-f 强制删除)：
		docker rmi  -f 镜像ID
		
		docker rmi -f $(docker images -q)	# 慎用  根据id删除所有镜像

帮助命令：
	哪里命令不会，就在哪个命令后面增加--help查询帮助文档。
	docker images --help
	docker xxx --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;容器常用命令&#34;&gt;容器常用命令
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.查询容器
	docker ps           只查看正在运行的容器
	docker ps -a		正在运行的容器以及停止的容器	
	docker ps -q		只查看正在运行的容器id
	docker ps -aq		查看正在运行的容器以及停止的容器的id

2.创建容器

	-i：表示运行容器
	-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。
	--name :为创建的容器命名。
	-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。

	1.创建交换式容器
		docker run -it --name=mycentos centos:7 /bin/bash	
		交互式容器一旦创建成功(创建+启动)，那么，直接进入容器内部(每一个容器都是一个最小型虚拟机)。
		exit 首次退出会停止容器。重新启动容器后登录，再退出。容器就不会停止。
	2.创建守护式容器
		docker run -id --name=mycentos centos:7	
	3.停止容器、启动容器、重启容器
		docker stop 容器名称或id
		docker start 容器名称或id
		docker restart 容器名称或id

4.删除容器 （-f    force）
	docker rm -f 容器名称或id
	
		删除正在运行的容器是不允许的。可以先停止再删除  或  加 -f 强制删除。
		docker rm spzx_mysql
		Error response from daemon: cannot remove container &amp;quot;/spzx_mysql&amp;quot;: container is running: stop the container before removing or force remove

5.登录容器
	docker exec -it 容器名称 /bin/bash

6.其他命令
	docker logs -f 容器名称/容器的id	# 查询容器内进程日志，-f参数表示实时监控日志信息     ctrl + c
	docker inspect 容器名称/容器的id	# 查看容器的详情信息
	docker cp 						 # 完成容器和宿主机之间的文件copy    容器即使停止也可以拷贝。	
		
		docker cp ./nginx.tar  mycentos_01:/opt			
		docker cp mycentos_01:/opt/nginx.tar ./

7.备份与迁移

	docker commit 容器名称/容器的id 镜像名称		 # 把docker容器保存成一个镜像
	docker save -o 镜像tar文件名称 镜像名称/镜像id	# 把镜像保存为tar文件
	docker load -i 镜像tar文件名称				# 把tar文件恢复成为一个镜像
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数据卷&#34;&gt;数据卷
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;数据卷就是将容器里的目录和宿主机目录进行映射。将容器里的目录数据备份到宿主机目录里。容器删除，容器里的数据没了。
但是，重新创建容器，将容器里的目录跟宿主机目录进行挂载 ，数据就可以找回。(异地备份)

关于数据卷的操作：
	docker volume ls                    # 查看数据卷列表
	docker volume create 数据卷名称      # 创建数据卷生成的宿主机上的物理路径： /var/lib/docker/volumes/数据卷名称/_data    
	docker volume inspect 数据卷名称     # 查看数据详情
	docker volume rm 数据卷名称          # 删除指定的数据卷

数据卷挂载：案例
	docker run -d --name=redis01 -p 6380:6379 -v redis-data:/data redis:7.0.10
	
目录挂载：案例	
	docker run -d --name redis02 -p 6381:6379 -v /redis-data:/data redis:7.0.10
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dockerfile&#34;&gt;dockerfile
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dockerfile就是一个编写相关指令的文本文件。通过这个文件可以创建想要的镜像。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	阿里云公开镜像：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		1. 登录阿里云Docker Registry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		$ docker login --username=yanjingkuang01 registry.cn-hangzhou.aliyuncs.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		您可以在访问凭证页面修改凭证密码。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		2. 将镜像推送到Registry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/docker_xxx/centos7_jdk17:[镜像版本号]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		$ docker push registry.cn-hangzhou.aliyuncs.com/docker_xxx/centos7_jdk17:[镜像版本号]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		3. 从Registry中拉取镜像
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		$ docker pull registry.cn-hangzhou.aliyuncs.com/docker_xxx/centos7_jdk17:[镜像版本号]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;docker-compose&#34;&gt;docker compose
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Docker Compose作用：批量管理容器。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		# 启动容器(如果不存在容器就创建、存在则修改)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		docker compose -f docker-compose.yml up -d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		# 删除所有容器
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		docker compose -f docker-compose.yml down
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		# 停止所有容器
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		docker compose -f docker-compose.yml stop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		# 启动所有容器
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		docker compose -f docker-compose.yml start
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		# 重启所有容器
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		docker compose -f docker-compose.yml restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
