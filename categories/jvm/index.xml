<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>JVM on 米 粒</title>
        <link>https://z221224.github.io/yuan/categories/jvm/</link>
        <description>Recent content in JVM on 米 粒</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>米饭能吃饱</copyright>
        <lastBuildDate>Sat, 28 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://z221224.github.io/yuan/categories/jvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>JVM</title>
        <link>https://z221224.github.io/yuan/p/jvm/</link>
        <pubDate>Sat, 28 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://z221224.github.io/yuan/p/jvm/</guid>
        <description>&lt;h2 id=&#34;jvm快速入门&#34;&gt;JVM快速入门
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;从面试开始&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;1.JVM是什么? JVM的内存区域分为哪些?&lt;/p&gt;
&lt;p&gt;2.什么是OOM? 什么是StackoverflowError? 有哪些方法分析?&lt;/p&gt;
&lt;p&gt;3.JVM 的常用参数调优你知道哪些?&lt;/p&gt;
&lt;p&gt;4.GC是什么? 为什么需要GC?&lt;/p&gt;
&lt;p&gt;5.什么是类加载器?&lt;/p&gt;
&lt;h2 id=&#34;什么是jvm&#34;&gt;什么是JVM
&lt;/h2&gt;&lt;p&gt;JVM：&lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;V&lt;/strong&gt;irtual &lt;strong&gt;M&lt;/strong&gt;achine，Java虚拟机&lt;/p&gt;
&lt;p&gt;**位置：**JVM是运行在操作 系统之上的，它与硬件没有直接的交互。&lt;/p&gt;
&lt;p&gt;为什么要在程序和操作系统中间添加一个JVM？&lt;/p&gt;
&lt;p&gt;Java 是一门抽象程度特别高的语言，提供了自动内存管理等一系列的特性。这些特性直接在操作系统上实现是不太可能的，所以就需要 JVM 进行一番转换。有了 JVM 这个抽象层之后，Java 就可以&lt;strong&gt;实现跨平台&lt;/strong&gt;了。JVM 只需要保证能够正确执行 .class 文件，就可以运行在诸如 Linux、Windows、MacOS 等平台上了。而 Java 跨平台的意义在于&lt;strong&gt;一次编译，处处运行&lt;/strong&gt;，能够做到这一点 JVM 功不可没。&lt;/p&gt;
&lt;h2 id=&#34;主流虚拟机有哪些&#34;&gt;主流虚拟机有哪些？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JCP组织（Java Community Process 开放的国际组织 ）：&lt;strong&gt;Hotspot虚拟机&lt;/strong&gt;（Open JDK版），sun2006年开源&lt;/li&gt;
&lt;li&gt;Oracle：Hotspot虚拟机（Oracle JDK版），闭源，允许个人使用，商用收费&lt;/li&gt;
&lt;li&gt;BEA：JRockit虚拟机&lt;/li&gt;
&lt;li&gt;IBM：J9虚拟机&lt;/li&gt;
&lt;li&gt;阿里巴巴：Dragonwell JDK（龙井虚拟机），电商物流金融等领域，高性能要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结构图&#34;&gt;结构图
&lt;/h2&gt;&lt;p&gt;**JVM的作用：**加载并执行Java字节码文件(.class) - 加载字节码文件、分配内存（运行时数据区）、运行程序&lt;/p&gt;
&lt;p&gt;**JVM的特点：**一次编译到处运行、自动内存管理、自动垃圾回收&lt;/p&gt;
&lt;img src=&#34;image-20240801163747777.png&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类加载器子系统：将字节码文件（.class）加载到内存中的方法区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行时数据区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法区：存储已被虚拟机加载的类的&lt;strong&gt;元数据信息(元空间)&lt;/strong&gt;。也就是存储字节码信息。&lt;/li&gt;
&lt;li&gt;堆：&lt;strong&gt;存放对象实例&lt;/strong&gt;，几乎所有的对象实例都在这里分配内存。&lt;/li&gt;
&lt;li&gt;虚拟机栈(java栈)：虚拟机栈描述的是&lt;strong&gt;Java方法执行的内存模型&lt;/strong&gt;。每个方法被执行的时候都会创建一个&lt;strong&gt;栈帧&lt;/strong&gt;（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息&lt;/li&gt;
&lt;li&gt;本地方法栈：本地方法栈则是&lt;strong&gt;记录&lt;/strong&gt;虚拟机当前使用到的&lt;strong&gt;native方法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;程序计数器：当前线程所执行的字节码的&lt;strong&gt;行号指示器&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地方法接口：虚拟机使用到的native类型的方法，负责调用操作系统类库。（例如Thread类中有很多Native方法的调用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行引擎：包含解释器、即时编译器和垃圾收集器 ，负责执行加载到JVM中的字节码指令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
